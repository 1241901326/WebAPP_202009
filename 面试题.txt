1.浏览器
    (1) 浏览器类型，主流浏览器的内核
        ie safari Chrome(谷歌) Mozila Firefox(火狐) Opera

        Triden内核 （ie）
        Gecko       (Firefox)
        WebKit   (Safari Chrome)
        Presto  (Opera)
     (2) 对浏览器其内核的理解
    浏览器的内核主要分为三个技术分支：排版渲染引擎、js引擎，以及其他
    排版渲染引擎：主要负责获得网页的内容(HTML,XML,图像),整理信息，以及
        计算网页的显示方式，然后输出到显示器
    js引擎：使用路渲染js的，js 的渲染速度越快，动态网页的展示也越快

    (3)一个页面从输入URL到页面加载显示完成，这个过程中都发生了什么
      1）浏览器根据请求的URL交给DNS域名解析，找到真实IP
      2）浏览器根据IP地址向浏览器发送TCP请求，与浏览器建立TCP三次握手
        a。客户端向服务器端发送一个建立链接的请求
        b。服务器端接受请求后发送同意链接的信号
        c。客户端接到同意链接的信号后，再次向服务器发送了确认信号，然后
            客户端与服务器端的链接建立成功
     3）浏览器发送HTTP请求
     4）服务器处理请求并返回HTTP报文
       a。服务器接到请求都，会根据HTTP请求中的内容来决定如何获取相应的HTML文件；
       b。服务器将得到的HTML文件发送给浏览器
       c。在浏览器还没有完全接受HTML文件时便开始渲染。显示网页
       d。在执行HTML中代码时，根据需要，浏览器会继续请求图片、CSS\JS等文件，过程同请求HTML
    5）断开连接
     (4) 浏览器缓存
     1）sessionStorage
        优点：可以临时存储，关闭页面标签自动回收，不支持跨页面交互
        缺点：只能作为临时存储，不能存储持久化
    2) localStorage
        优点：用于长存保存整个网站的数据，保存的数据没有过期时间，直到手动去删除
        缺点：存在大小限制，IE8以上的IE版本才支持这个属性，目前所有的浏览器都会把localStorage的
        值类型限定为string类型，这个在对我们日常比较常见的JSON对象类型需要一些转换
    3）cookie
        优点：兼容性好，几乎所有的浏览器都支持
        缺点：大小有限制，而且每次发送请求，请求头都会带着cookie一起发过去，
            现在基本大多数登陆的合法验证都是用COOKIE验证的
    4）userData
        优点：出现时间比session Storage要早
        缺点： IE专门的存储方式，存储大小有限制，单个文件的大小限制时128KB，一个域名
        下总共可以保存1024KB的文件，文件个数没有限制。
     (5) http 状态码
      1） 以2xx开头的都表示成功响应
        200 请求成功
        204 请求处理成功，但是没有资源可以返回
        206 对资源某一部分进行响应，由Content-Range制定范围的实体内容
      2） 以3xx开头的都表示需要进行附加操作以完成请求
      3） 以4xx开头的响应结果表示客户端发生错误
            403 请求资源的访问被服务器拒绝了
            404 状态码表明服务器无法找到请求的资源
      4） 以5xx开头的响应结果表示服务器本身发送错误
    (6) URL 和 URI 的区别
     URI是统一资源标识符，相当于一个人身份证号码


     URL是统一资源定位符，相当于一个人的家庭住址
     URL由三部分组成：资源类型、存放资源的主机域名、资源文件名
         或者四部分： 协议、主机、端口、路径

    (7)http与https的区别
        HTTPS协议需要到CA(证书颁发机构)申请证书，一般免费的证书比较少，因而需要一定费用
        HTTP是超文本传输协议，信息是明文传输，HTTPS则是安全性的SSL加密传输协议
        HTTP和HTTPS使用的是完全不同的链接方式，用的端口也不一样，前者是80,后者是443
        HTTP的连接很简单，是无状态的，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP
         协议安全。(五状态的意思是其数据包的发送、传输和接受都是相互独立的。无链接的意思是指通信双方都不长久的
         维持对方的任何信息)

2 HTML篇
     (1)Doctype 作用
        告知浏览器的解析器用什么文档标准解析这个文档
    （2）标准模式与兼容模式各有什么区别？
        标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行
        在兼容模式中，页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作
        简单的说，就是尽可能地显示能显示地东西给用户看
    （3）Doctype 文档类型
        HTML4。01中有3种DTD(文档类型定义)声明可以选择：过度地（Transitional）、严格的（Strict）
        和框架额(Frameset)
    (4)语义化的理解
        优点：
            代码结构清晰、易于阅读，利于开发和维护
            提高用户体验，在样式加载失败时，页面结构清晰
            方便其他设备解析，根据语义渲染网页、
            有利于搜索引擎话（SEO）,搜索引擎爬虫会根据不同的标签来赋予不同的权重
            语义化标签主要有:
                title,header,nav,main,article,h1~h6
                ul,ol,address,canvas,dialog,aside,section,
                figure,details,mark

    (5)HTML跟XHTML的区别
        1）其基础语言不同
            XHTML是基于du可扩展标记语言（xml）
            HTML是基于标准通用标记语言(SGML)
        2) 语法严格程度不同
            1.XHTML语法比较严格，存在DTD定义规则
            2.HTML语法比较松散，这样对网页编写者来说，比较方便
        3）可混合应用不同
            1.XHTML可以混合各种XML应用，比如MathML、SVG
            2.HTML不能混合其他XML应用
        4）大小写敏感度不同
            1.  XHTML对大小写敏感，标准的XHTML标签应该使用小写
            2. HTML对大小写不敏感
        5)公布时间不同
            1.XHTML是2000年W3C公布的
            2.HTML4.01是1999年W3C推荐标准
    (6)页面导入样式时，使用link跟@import的区别
        1。属性差别 ，link属于XHTML标签，而@import完全是CSS提供的语法规则
           link标签除了可以加载CSS外，还可以左很多其他的事情，比如定义RSS，
           定义rel链接属性等，而import只能加载CSS了
        2. 加载顺序的 差别，当一个页面被加载的时候(就是被浏览者浏览的时候)，就是
           link引用的CSS会同时被加载，而import引用的CSS会等到页面都下载完后再加载。
           所有有时候浏览Import加载的CSS页面时候开始会没有样式。
        3.兼容性的差别，因为import是CSS2.1提出的所有老的浏览器不支持，import只有在
          IE5以上的才可以识别，而LINK标签无此问题
        4.使用 dom控制样式时的差别，当使用js控制dom去改变样式的时候，只能使用Link标签，应为import不是dom可以控制的
            
     (7)HTML5的新特征
        1.语义化标签
        2.增强型表单
          比如 input输入的类型
        3.心怎视频和音频标签
        4.Canvas绘图
        5.SVG绘图
        6.地理定位
        7.拖放API
        8.web worker
        9.web Storage
        10.webSocket
    (8)iframe的优缺点
        优点：1.能够原封不动的把嵌入的网页展现出来
              2.如果有多个网页引用iframe，那么你只需要修改iframe的内容，就
                 可以实现调用的每一个页面内容的更改，方便开解
              3.网页如果为了统一风格，又不和版本都是一样的，就可以写成一个页面，用
                iframe来嵌套，可以增加代码的可重用
              4.如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决
        缺点：1.会产生很多页面，不容易管理
              2.iframe框架结构又是会让人感到迷惑，如果框架个数多的话，
                 肯会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差
              3，代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在搜索引擎爬虫还
                不能很好处理iframe中的内容，所以使用iframe会不利于搜索引擎优化
              4.很多的移动设备 无法完全显示框架，设备兼容性差
              5.iframe框架页面会增加服务器的http请求，对于大型网站时不可取的
     (9)img 中的alt和title属性
        alt是图片加载失败的时候，显示在网页上的替代文字，
        title是鼠标放在图片上边时显示的文字
        alt是必要属性，而title不是
3.CSS 
    (1)BFC
        模块格式化上下文，一种属性，属性会影响元素与元素之间的位置、间距
        形成条件：
            float:给元素添加浮动
            position:给元素添加定位
            display:给元素添加display属性
            overflow：给元素添加overflow属性
        形成后出现的常见问题：
            1.marfin重叠问题
            2.浮动相关问题

4.js篇
    (1)闭包
        函数跟函数内部可以访问的变量（环境）的总和
         例子：
            function(){
                var lives = 50

                window.奖励一条命 = function(){
                    lives +=1
                }

                window.死一条命 = function(){
                    lives -=1
                }
            }

        不会污染函数值，谁调用就给谁开辟一处空间
    (2)介绍一下new操作符，具体干了什么
        1.创建一个空对象                                                  obj{}
        2.对象的_proto属性指向父元素的prototype                             obj.__proto__=object.prototype
                                                                        object.call(obj)
        3.新创建的对象由this所引用，最后隐式的返回this

    (3)私有函数 、变量
        function foo(){
            var a = 1;
            var fn = function(){
                consolo.log(a)
            }
        }
        //没有返回，也就是只有在foo()中才能使用
    (4)静态变量、函数
        function obj(){
            obj.a=1;
            obj.fn = function(){

            }
        }
        consolo.log(obj.a) //1
        var o = obj();
        consolo.log(o.a)//undefined
        //通过.为函数添加的属性和函数，通过对象本身仍然可以访问到，
        但是实例却不能访问
    (5)实例对象、函数
        function obj(){
            this.a=1;
            this.fn = function(){

            }
        }
        consolo.log(obj.a) //undefined
        var o = obj();
        consolo.log(o.a)//1

    (6)原型
         students(){}
         var foo = new students()

        students . prototype = students原型
         foo.__proto__  = students原型
         foo.name ="张三"  这是在给foo中添加nama而不是修改原型
    (7)深拷贝和浅拷贝
        浅拷贝  复制地址 指针
        深拷贝   复制内容
    (8)Ajax
        异步的JavaScript和xml  （局部刷新）
        创建快速动态网页的技术
        用了AJAX之后，你点击，然后页面上的一行字就变化了，页面本身不用刷。
    (9)数组去重
        1.利用ES6 Set去重
            function unique(arr){
                return Array.from(new Set(arr))
            }
        2.利用for嵌套for，然后splice去重
            function unique(arr){
                for(var i=0;i<arr.length;i++){
                    for(var j=i+1; j<arr.length;j++){
                        if(arr[i]==arr[i]){
                            arr.aplice(j,1);
                            j--;
                        }
                    }
                }
            }

    (10)eval()
         功能：把对应的字符串解析成JS代码并运行
         JSON字符串转换为JSON对象时候使用

    (11)UA(user Agent) 用户代理
    (12)事件委托

    (13)promise
        js语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行Io、等
        待或者其他异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用方
        可以在合适的时机，选择等待这个承诺兑现（通过Promise的then方法的回调）
        async

    (14)window.onload 和document.ready的区别？
    页面加载的顺序：域名解析->加载html->加载js和css->加载图片等
        window.onload 是在加载完所以的文件以后(图片)才执行的一个函数
        document.ready是在加载完文档结构以后执行
    (15)var let 和 const 区别
        var 定义变量，可以跨块作用域访问，不可以跨函数作用域访问
            **跨块作用域{
                var a = 1;
            }
            consolo.log(a)//1
        let 只可以在块作用域中访问，不能够跨块作用域访问，更不能跨函数访问，不可以在    
            同一个作用域内重复申明同一个变量
        const 定义常量，初始化必须赋值，只能在块作用域内使用，不能修改
        

    (16)作用域
        全局作用域  
        函数作用域
        块级作用域{} 包裹起来的
    (17) 先栈再堆
        栈区：局部变量 指针
        堆区：数组 函数 
        闭包中的变量并不保存中栈内存中，而是保存在堆内存中.
    (18)垃圾回收算法
        1.引用计数
            缺点：循环引用，如果两个对象相互引用，尽管他们不再使用，但是垃圾回收机制不回收
            function cycle(){
                var o1 = {}
                var o2 = {}
                o1.a =o2
                o2.a = o1
                return "cycle reference"
            }
            cycle()

        2.标记清除
    (19)内存泄漏
        对于不再用到的内存，没有及时释放，就叫做内存泄漏
        1)全局变量 
        function foo (arg){
            bar = 1
        }
            没有给bar 添加var 会使得其在全局变量下创建一个新的变量
        **** 在js文件开头添加 ‘user strict’  使用严格模式

        2)被遗忘的定时器和回调
          现在浏览器跟框架（jq）可以自动删除监听器
4.安全问题
    （1）XSS 跨站脚本攻击
            类：攻击链接
        反射型XSS
        存储型XSS
        DOM xss
    (2)CSRF 跨站点请求伪造
        用户打开浏览器，输入用户名和密码访问淘宝网页A，网页将cookie信息返回给浏览器，此时用户打开网站B
        ，B发初攻击代码，并发初请求访问A。



        CSRF攻击实例
          CSRF攻击实例得意得意得意


       受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 http://bank.example/withdraw?account=bob&amount=1000000&for=bob2 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。

        黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory。但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。

        这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： src=”http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory ”，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。 

        手段：在请求地址中添加 token 并验证

5.跨域
    (1)跨域
        一个域名的网页去请求另一个域名的资源
        跨域的严格一点：只要协议 域名 端口号有任何一个不同，都被当做跨域
    (2)同源策略

    (3)解决跨域的方法
        1)跨域资源共享(CORS)
        2)通过jsonp跨域(只实现GET请求)
        3)通过修改document.domain来跨子域
        4)window.name 来跨域
        5)使用HTML5的window.postMessage方法跨域
        6)web sockets
        7)图像ping（单向）
    (4)为什么限制跨域
        安全问题
    (5)为什么要跨域
        公司内部有不同的子域，要想访问就得跨域

6.性能优化
    (1)用过的性能优化
        1)尽可能减少HTTP请求
            压缩代码，控制图片大小
        2)避免在CSS中使用Expression (css表达式)
        3)控制全局变量、缓存DOM节点查找的结果。减少IO读取操作
        4)使用innerHTML代替DOM操作，减少DOM操作次数
    (2)CSS Sprite是什么 
        css精灵图， 网页图片应用处理方式
           将一些背景图片整合到一张图片文件中，再通过
                background-image /repeat/position进行定位


        优点：减少图片字节，以及网页的HTTP请求，提高页面性能
        缺点：背景一旦有少许改动，就得重新改合图片





























7.vue （页面收藏夹）
  （1）路由
      默认路由：登录页
      权限路由：其他所有需要控制权限的路由
    (1)vue-router的两种传参方式
        1）router.push(字符串跟对象)
            this.$router.push({
                paht:'/details',
                query:{
                    name:'张三'，
                    id：1
                }
            })
            动态路由和query属性传值，页面刷新参数不会丢失
            params会丢失
        2)声明式的导航<router-link></router-link>
        

         
    


    

    